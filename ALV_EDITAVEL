

TYPES: BEGIN OF ge_prod.
    INCLUDE STRUCTURE zprodutos_203.
TYPES: desc_tipo TYPE val_text.
TYPES: END OF ge_prod.

DATA: gt_prod TYPE STANDARD TABLE OF ge_prod,
      gs_prod LIKE LINE OF gt_prod.

DATA: ok_code          LIKE sy-ucomm,
      custom_container TYPE REF TO cl_gui_custom_container,
      gr_grid          TYPE REF TO cl_gui_alv_grid,
      container        TYPE scrfname VALUE 'ALV',
      gs_layout        TYPE lvc_s_layo.

DATA: gt_fieldcat TYPE lvc_t_fcat,
      gs_fieldcat TYPE lvc_s_fcat.

DATA: lt_fieldcat TYPE slis_t_fieldcat_alv.

DATA: gt_rows TYPE lvc_t_row,
      gv_row  TYPE lvc_s_row.

DATA: lt_exclude TYPE ui_functions,
      ls_exclude TYPE ui_func.

DATA prod TYPE zprodutos_203-produto.

CLASS lcl_alv DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS: set_toolbar FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object.
    CLASS-METHODS: get_ucomm FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.
    CLASS-METHODS: change FOR EVENT data_changed_finished OF cl_gui_alv_grid
      IMPORTING e_modified et_good_cells.
ENDCLASS.
CLASS lcl_alv IMPLEMENTATION.
  METHOD set_toolbar.
    DATA: wa_toolbar TYPE stb_button.
    wa_toolbar-butn_type = 3.
    APPEND wa_toolbar TO e_object->mt_toolbar.

    CLEAR wa_toolbar.
    wa_toolbar-function = 'SWITCH'.
    wa_toolbar-icon = icon_toggle_display_change.
    wa_toolbar-quickinfo = 'Editar/Visualizar'.
    wa_toolbar-butn_type = 0.
    APPEND wa_toolbar TO e_object->mt_toolbar.

    IF gr_grid->is_ready_for_input( ) <> 0.
      CLEAR wa_toolbar.
      wa_toolbar-function  = 'DELETAR'.
      wa_toolbar-icon      = icon_delete.
      wa_toolbar-quickinfo = 'Deletar produto'.
      wa_toolbar-butn_type = 0.
      APPEND wa_toolbar TO e_object->mt_toolbar.

      CLEAR wa_toolbar.
      wa_toolbar-function  = cl_gui_alv_grid=>mc_fc_loc_insert_row.
      wa_toolbar-icon      = icon_insert_row.
      wa_toolbar-quickinfo = 'Adicionar linha'.
      wa_toolbar-butn_type = 0.
      APPEND wa_toolbar TO e_object->mt_toolbar.
    ENDIF.

*    CLEAR wa_toolbar.
*    wa_toolbar-function  = 'EDITAR'.
*    wa_toolbar-icon      = icon_change.
*    wa_toolbar-quickinfo = 'Editar produto'.
*    wa_toolbar-butn_type = 0.
*    APPEND wa_toolbar TO e_object->mt_toolbar.

    CLEAR wa_toolbar.
    wa_toolbar-function  = 'SMARTFORM'.
    wa_toolbar-icon      = icon_print.
    wa_toolbar-quickinfo = 'Gerar smartform'.
    wa_toolbar-butn_type = 0.
    APPEND wa_toolbar TO e_object->mt_toolbar.
  ENDMETHOD.

  METHOD get_ucomm.
    DATA: resp TYPE c.

    DATA(lt_prod_aux) = gt_prod.
    CLEAR lt_prod_aux.

    CASE e_ucomm.
      WHEN 'DELETAR'.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = 'Deletar produto'
            text_question         = 'Deseja deletar o produto?'
            text_button_1         = 'Sim'
            text_button_2         = 'NÃ£o'
            default_button        = '2'
            display_cancel_button = ''
          IMPORTING
            answer                = resp
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.

        CASE resp.
          WHEN '1'.
            CALL METHOD gr_grid->get_selected_rows IMPORTING et_index_rows = gt_rows.
            CALL METHOD gr_grid->get_current_cell IMPORTING es_row_id = gv_row.

            LOOP AT gt_rows INTO gv_row.
              READ TABLE gt_prod INDEX gv_row-index INTO gs_prod.
              APPEND gs_prod TO lt_prod_aux.
              DELETE FROM zprodutos_203 WHERE produto = gs_prod-produto.
            ENDLOOP.
            IF sy-subrc = 0.
              COMMIT WORK.
              LOOP AT lt_prod_aux REFERENCE INTO DATA(lo_prod).
                DELETE gt_prod WHERE produto = lo_prod->produto.
              ENDLOOP.
              MESSAGE 'Produto deletado com sucesso' TYPE 'S'.
              gr_grid->refresh_table_display( ).
            ENDIF.
          WHEN '2'.
            EXIT.
        ENDCASE.

      WHEN 'EDITAR'.
        DATA: i_valid TYPE c.
        CALL METHOD gr_grid->check_changed_data
          IMPORTING
            e_valid = i_valid.

        IF i_valid = 'X'.
          DATA lt_prod TYPE TABLE OF zprodutos_203.
          lt_prod = CORRESPONDING #( gt_prod ).

          MODIFY zprodutos_203 FROM TABLE lt_prod.
          IF sy-subrc = 0.
            COMMIT WORK.
            PERFORM buscar_dados.
            gr_grid->refresh_table_display( ).
          ENDIF.
        ENDIF.

      WHEN 'SMARTFORM'.
        SUBMIT zsmartforms AND RETURN.
      WHEN 'SWITCH'.

        IF gr_grid->is_ready_for_input( ) eq 0.
*       set edit enabled cells ready for input
          CALL METHOD gr_grid->set_ready_for_input
                     EXPORTING i_ready_for_input = 1.

        ELSE.
*       lock edit enabled cells against input
          CALL METHOD gr_grid->set_ready_for_input
                    EXPORTING i_ready_for_input = 0.
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD change.
    DATA: ls_modi TYPE lvc_s_modi.
    DATA: lt_prod TYPE TABLE OF zprodutos_203.

    FIELD-SYMBOLS:<prod> LIKE LINE OF gt_prod.

    LOOP AT et_good_cells INTO ls_modi.

      UNASSIGN <prod>.
      READ TABLE gt_prod ASSIGNING <prod> WITH KEY produto = 0.  "ls_modi-row_id.
      "READ TABLE gt_prod INTO gs_prod WITH KEY produto = 0 .  "ls_modi-row_id.
      IF sy-subrc = 0.
        PERFORM gera_serial USING '01' 'ZPROD_203'.
        <prod>-produto = prod.
        <prod>-moeda = 'BRL'.
        "gs_prod-produto = prod.
        "MODIFY gt_prod FROM gs_prod INDEX 1.
      ENDIF.

      lt_prod = CORRESPONDING #( gt_prod ).
      MODIFY zprodutos_203 FROM TABLE lt_prod.
        IF sy-subrc = 0.
          COMMIT WORK.
          DELETE FROM zprodutos_203 WHERE produto = 0.
*          SELECT SINGLE produto FROM zprodutos_203 INTO <prod>-produto WHERE produto = 0.
*          IF sy-subrc = 0.
*
*            gs_prod-produto = prod.
*
*            UPDATE zprodutos_203 SET produto = gs_prod-produto WHERE produto = 0.
*            UPDATE zprodutos_203 SET produto = <prod>-produto WHERE produto = 0.
*          ENDIF.
          PERFORM buscar_dados.
          SORT gt_prod BY produto ASCENDING.
          gr_grid->refresh_table_display( ).
          MESSAGE 'SUCESSO' TYPE 'S'.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.
  SELECT * FROM zprodutos_203 INTO TABLE gt_prod.

  CALL SCREEN 100.

MODULE pbo OUTPUT.
  SET PF-STATUS 'STATUS_203'.
  SET TITLEBAR 'ZTITLE'.

  IF custom_container IS INITIAL.
    CREATE OBJECT custom_container
      EXPORTING
        container_name = container.
    CREATE OBJECT gr_grid
      EXPORTING
        i_parent = custom_container.
  ELSE.
    gr_grid->refresh_table_display( ).
  ENDIF.

  SET HANDLER lcl_alv=>set_toolbar FOR gr_grid.
  SET HANDLER lcl_alv=>get_ucomm FOR gr_grid.
  SET HANDLER lcl_alv=>change FOR gr_grid.

  CALL METHOD gr_grid->register_edit_event
    EXPORTING
*     i_event_id = cl_gui_alv_grid=>mc_evt_modified.
      i_event_id = cl_gui_alv_grid=>mc_evt_enter.

  CALL METHOD gr_grid->set_ready_for_input
    EXPORTING i_ready_for_input = 0.

  PERFORM layout.
  PERFORM ex_toolbar.
  PERFORM buscar_dados.
  PERFORM fieldcat.

  CALL METHOD gr_grid->set_table_for_first_display(
    EXPORTING
      is_layout            = gs_layout
      it_toolbar_excluding = lt_exclude

    CHANGING
      it_outtab            = gt_prod[]
      it_fieldcatalog      = gt_fieldcat[]

                             ).

ENDMODULE.

MODULE pai INPUT.
  CASE ok_code.
    WHEN 'BACK'.
      LEAVE PROGRAM.
    WHEN 'EXIT'.
      LEAVE PROGRAM.
  ENDCASE.
ENDMODULE.

FORM fieldcat.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name   = sy-repid
*     I_INTERNAL_TABNAME           = 'GT_PROD'
      i_structure_name = 'ZPRODUTOS_203'
*     I_CLIENT_NEVER_DISPLAY       = 'X'
      i_inclname       = sy-repid
*     I_BYPASSING_BUFFER           =
*     I_BUFFER_ACTIVE  =
    CHANGING
      ct_fieldcat      = lt_fieldcat
*   EXCEPTIONS
*     INCONSISTENT_INTERFACE       = 1
*     PROGRAM_ERROR    = 2
*     OTHERS           = 3
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.
  DATA: ls_fieldcat TYPE slis_fieldcat_alv.
  ls_fieldcat-fieldname = 'DESC_TIPO'.
  ls_fieldcat-seltext_m = 'DESC. TIPO'.
  ls_fieldcat-col_pos = 6.
  APPEND ls_fieldcat TO lt_fieldcat.
  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      it_fieldcat_alv = lt_fieldcat
*     IT_SORT_ALV     =
*     IT_FILTER_ALV   =
*     IS_LAYOUT_ALV   =
    IMPORTING
      et_fieldcat_lvc = gt_fieldcat[]
*     ET_SORT_LVC     =
*     ET_FILTER_LVC   =
*     ES_LAYOUT_LVC   =
    TABLES
      it_data         = gt_prod[]
*   EXCEPTIONS
*     IT_DATA_MISSING = 1
*     OTHERS          = 2
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  LOOP AT gt_fieldcat INTO gs_fieldcat.
    CASE gs_fieldcat-fieldname.
      WHEN 'PRODUTO'.
        gs_fieldcat-edit = ''.
      WHEN 'DESC_TIPO'.
        gs_fieldcat-edit = ''.
*        gs_fieldcat-outputlen = 30.
      WHEN OTHERS.
        gs_fieldcat-edit = 'X'.
    ENDCASE.
    MODIFY gt_fieldcat FROM gs_fieldcat.
  ENDLOOP.
ENDFORM.

FORM layout.
  gs_layout-zebra = 'X' .
  gs_layout-smalltitle = 'X'.
  gs_layout-sel_mode = 'D'.
ENDFORM. " PREPAR_LAYOUT

FORM buscar_dados.
  DATA lv_index TYPE sy-tabix.
  LOOP AT gt_prod INTO gs_prod.
    lv_index = sy-tabix.
    CALL FUNCTION 'STF4_GET_DOMAIN_VALUE_TEXT'
      EXPORTING
        iv_domname      = 'ZTIPO_PRODUTO_203'
        iv_value        = gs_prod-tipo_produto
      IMPORTING
        ev_value_text   = gs_prod-desc_tipo
      EXCEPTIONS
        value_not_found = 1
        OTHERS          = 2.
    MODIFY gt_prod FROM gs_prod INDEX lv_index.
  ENDLOOP.
ENDFORM.

FORM ex_toolbar.

  ls_exclude = cl_gui_alv_grid=>mc_fc_excl_all.
  APPEND ls_exclude TO lt_exclude.

ENDFORM.


FORM gera_serial
  USING nr_range TYPE inri-nrrangenr
        object   TYPE inri-object.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      nr_range_nr             = nr_range
      object                  = object
*     QUANTITY                = '1'
*     SUBOBJECT               = ' '
*     TOYEAR                  = '0000'
*     IGNORE_BUFFER           = ' '
    IMPORTING
      number                  = prod
*     QUANTITY                =
*     RETURNCODE              =
    EXCEPTIONS
      interval_not_found      = 1
      number_range_not_intern = 2
      object_not_found        = 3
      quantity_is_0           = 4
      quantity_is_not_1       = 5
      interval_overflow       = 6
      buffer_overflow         = 7
      OTHERS                  = 8.
  IF sy-subrc <> 0.
    ROLLBACK WORK.
    WRITE 'Erro no snro'.
  ELSE.
    COMMIT WORK.
  ENDIF.
ENDFORM.
